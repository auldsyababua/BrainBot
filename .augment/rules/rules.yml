# FLRTS Project - Augment Rules Configuration
# These rules help maintain consistency and best practices across the codebase

version: 1.0
rules:
  # ============================================
  # ALWAYS RULES - Applied to every interaction
  # ============================================
  always:
    - name: smart-rails-integrity
      description: Preserve Smart Rails token optimization
      content: |
        When modifying message routing:
        - Check confidence scoring in src/rails/confidence_scoring.py first
        - Preserve deterministic preprocessing for /commands and @mentions
        - Maintain 100% confidence = 0 tokens principle
        - Log token savings with ⏱️ prefix
    
    - name: flrts-structure
      description: Maintain FLRTS organizational structure
      content: |
        Follow FLRTS filing structure:
        - Field reports: 10nz_kb/sites/{site_name}/field-reports/
        - Lists: Support /newlist, /addtolist, /removefromlist, /showlist
        - Tasks: Require @mention assignee, due date, and site context
        - Reminders: Include time and assignee
        - Sub-tasks: Link to parent task ID
    
    - name: storage-hierarchy
      description: Respect storage layer responsibilities
      content: |
        Storage layer usage:
        - Supabase: Document storage and audit logs ONLY
        - Upstash Redis: Conversation state with 24hr TTL
        - Upstash Vector: Semantic search, namespace "10netzero"
        - Neo4j: Graph relationships between entities
        Never mix responsibilities between storage layers
    
    - name: production-architecture
      description: Maintain webhook-based production setup
      content: |
        Production deployment rules:
        - Production ALWAYS uses webhooks via main.py
        - Local development uses polling via run_bot.py
        - Verify webhook after deployment: python setup_webhook.py
        - Never use polling in production (wastes resources)
    
    - name: security-first
      description: Security and authorization requirements
      content: |
        Security requirements:
        - Validate AUTHORIZED_USER_IDS before any operation
        - Never expose credentials in code or logs
        - Log all operations to Supabase audit table
        - Use prepared statements for database queries
        - Wrap external API calls in specific try/except blocks

  # ============================================
  # AUTO RULES - Context-specific automation
  # ============================================
  auto:
    - name: rails-development
      description: Smart Rails routing development
      match: "src/rails/**"
      content: |
        Rails development requirements:
        - Follow three-phase routing: preprocess → confidence → execution
        - New processors must extend BaseProcessor
        - Implement confidence_score() method returning 0-100
        - Cache dynamic prompts for reuse
        - Document token savings in docstrings
        - Add unit tests in tests/unit/test_processors.py
    
    - name: telegram-mini-app
      description: Telegram Mini App development
      match: "telegram-mini-app/**"
      content: |
        Mini App development:
        - Use TypeScript strict mode
        - Components must handle offline state gracefully
        - Follow existing Tailwind CSS patterns
        - Test with vitest, not jest
        - Implement proper Telegram WebApp security checks
        - Use existing brainbotApi service for backend calls
    
    - name: bot-handlers
      description: Bot handler modifications
      match: "src/bot/**"
      content: |
        Bot handler requirements:
        - Return confirmation messages under 100 characters
        - Handle both webhook and polling modes
        - Implement rate limiting for user commands
        - Use async/await for all I/O operations
        - Add comprehensive error messages for debugging
    
    - name: storage-operations
      description: Storage layer operations
      match: "src/storage/**"
      content: |
        Storage operation rules:
        - Vector operations must respect VECTOR_TOP_K setting
        - Batch operations when processing > 10 documents
        - Implement retry logic with exponential backoff
        - Cache vector search results (TTL: 300s)
        - Use asyncio for concurrent API calls
    
    - name: testing-requirements
      description: Test file requirements
      match: "tests/**"
      content: |
        Testing requirements:
        - Use pytest fixtures for setup/teardown
        - Mock external API calls
        - Test both success and failure paths
        - Include performance benchmarks for operations > 100ms
        - Document test purpose in docstrings

  # ============================================
  # MANUAL RULES - Manually triggered
  # ============================================
  manual:
    - name: performance-optimization
      description: Performance optimization checklist
      tags: [performance, optimization]
      content: |
        Performance optimization:
        - Profile code before optimizing
        - Cache expensive computations
        - Use connection pooling for databases
        - Implement pagination for large datasets
        - Monitor memory usage in production
        - Add performance metrics logging
    
    - name: deployment-checklist
      description: Pre-deployment verification
      tags: [deployment, production]
      content: |
        Deployment checklist:
        - Run full test suite: pytest tests/
        - Verify environment variables in .env
        - Check webhook configuration
        - Test Smart Rails routing
        - Verify storage connections
        - Review recent logs for errors
        - Update version in src/core/version.py
    
    - name: documentation-update
      description: Documentation requirements
      tags: [documentation, docs]
      content: |
        Documentation updates:
        - Update README.md for new features
        - Add docstrings with Args, Returns, Raises
        - Document token savings in PR descriptions
        - Update command syntax in docs/
        - Add examples for new functionality
        - Update API documentation if changed

  # ============================================
  # ANTI-PATTERNS - Things to avoid
  # ============================================
  antipatterns:
    - name: common-mistakes
      description: Common mistakes to avoid
      content: |
        NEVER do these:
        - Use polling in production (wastes resources)
        - Store sensitive data in Redis (use Supabase)
        - Skip confidence scoring (breaks Smart Rails)
        - Hardcode site names (use dynamic extraction)
        - Create duplicate test files
        - Mix temporary and production code
        - Bypass authorization checks
        - Use synchronous I/O in async contexts
        - Commit .env files to repository
        - Log sensitive user data

# ============================================
# REFERENCES - Key documentation
# ============================================
references:
  architecture:
    - file: docs/smart-rails-architecture.md
      description: Smart Rails routing system
    - file: docs/DEPLOYMENT_GUIDE.md
      description: Deployment procedures
    - file: docs/STORAGE_IMPLEMENTATION_PLAN.md
      description: Storage layer design
    - file: tests/README.md
      description: Testing guidelines
  
  critical_files:
    - file: src/rails/router.py
      description: Core routing logic
    - file: src/rails/confidence_scoring.py
      description: Confidence algorithms
    - file: src/core/config.py
      description: Environment configuration
    - file: src/storage/vector_store.py
      description: Vector operations
    - file: src/bot/handlers.py
      description: Message handlers