# FLRTS Workspace Configuration
# Project-specific settings for the BrainBot CAG system

version: 1.0
workspace:
  name: FLRTS - BrainBot
  description: Intelligent Telegram bot with CAG filing system
  type: python-typescript-hybrid
  
  # Project structure
  structure:
    backend:
      root: src/
      language: python
      framework: fastapi
      style: pep8
    frontend:
      root: telegram-mini-app/
      language: typescript
      framework: react
      style: prettier
    infrastructure:
      deployment: render
      architecture: webhook-based
      monitoring: supabase-logs

  # Environment configuration
  environment:
    production:
      entry: main.py
      mode: webhook
      url: https://brainbot-v76n.onrender.com
    development:
      entry: run_bot.py
      mode: polling
      hot_reload: true

  # Technology stack
  stack:
    languages:
      - python: "3.9+"
      - typescript: "5.0+"
      - sql: "postgresql"
    frameworks:
      backend:
        - fastapi: "Web framework"
        - python-telegram-bot: "Bot framework"
        - langchain: "LLM orchestration"
      frontend:
        - react: "UI framework"
        - vite: "Build tool"
        - tailwind: "CSS framework"
        - vitest: "Testing"
    databases:
      - supabase: "Document storage & audit logs"
      - upstash-redis: "Conversation state"
      - upstash-vector: "Semantic search"
      - neo4j: "Graph relationships"
    services:
      - openai: "LLM provider"
      - telegram: "Messaging platform"
      - cloudflare: "Edge workers"
      - render: "Deployment platform"

  # Code conventions
  conventions:
    python:
      style: black
      max_line_length: 100
      docstring_format: google
      type_hints: required
      async_preferred: true
    typescript:
      style: prettier
      semicolons: false
      quotes: single
      strict_mode: true
      null_checks: true
    naming:
      files: snake_case
      classes: PascalCase
      functions: snake_case
      constants: UPPER_SNAKE_CASE
      components: PascalCase
    git:
      branch_naming: feature/*, bugfix/*, hotfix/*
      commit_format: conventional
      pr_required: true

  # Testing requirements
  testing:
    coverage_threshold: 80
    frameworks:
      python: pytest
      typescript: vitest
    structure:
      unit: tests/unit/
      integration: tests/integration/
      performance: tests/performance/
      system: tests/system/
    requirements:
      - Unit tests for new features
      - Integration tests for API endpoints
      - Performance tests for operations > 100ms
      - Mock all external services

  # Performance targets
  performance:
    response_time:
      p50: 200ms
      p95: 500ms
      p99: 1000ms
    smart_rails:
      token_reduction: 70%
      confidence_threshold: 80
      cache_ttl: 300s
    storage:
      vector_top_k: 5
      batch_size: 10
      connection_pool: 10

  # Security policies
  security:
    authentication:
      method: telegram_user_id
      config: AUTHORIZED_USER_IDS
    data_protection:
      sensitive_storage: supabase
      encryption: at_rest
      audit_logging: required
    api_keys:
      storage: environment_variables
      rotation: quarterly
      exposure_check: pre_commit

  # Documentation
  documentation:
    required_for:
      - New features
      - API changes
      - Configuration changes
      - Breaking changes
    formats:
      code: docstrings
      api: openapi
      user: markdown
      architecture: diagrams
    locations:
      user_guides: docs/
      api_docs: docs/api/
      architecture: docs/architecture/
      deployment: docs/deployment/

# Project-specific patterns
patterns:
  smart_rails:
    description: Token optimization system
    files:
      - src/rails/router.py
      - src/rails/confidence_scoring.py
      - src/rails/processors/*.py
    rules:
      - Deterministic preprocessing first
      - Confidence scoring 0-100
      - Dynamic prompt generation
      - Cache reusable prompts
  
  flrts_structure:
    description: Filing system organization
    paths:
      field_reports: 10nz_kb/sites/*/field-reports/
      lists: 10nz_kb/sites/*/lists/
      tasks: Stored in Supabase
      reminders: Stored in Supabase
    format: YAML frontmatter + Markdown
  
  storage_layers:
    description: Multi-tier storage architecture
    responsibilities:
      supabase:
        - Document persistence
        - Audit logs
        - User data
      redis:
        - Session state
        - Temporary cache
        - Rate limiting
      vector:
        - Semantic search
        - Document embeddings
        - Similarity matching
      neo4j:
        - Entity relationships
        - Knowledge graph
        - Memory connections

# Development workflow
workflow:
  branches:
    main: Production branch
    develop: Integration branch
    feature/*: Feature development
    hotfix/*: Emergency fixes
  
  review:
    required_approvals: 1
    auto_merge: false
    ci_required: true
  
  deployment:
    staging_first: true
    rollback_plan: required
    monitoring_period: 24h

# Common commands
commands:
  setup: pip install -r requirements.txt
  test: pytest tests/
  lint: black src/ --check
  format: black src/
  dev: python run_bot.py
  prod: python main.py
  webhook: python setup_webhook.py
  logs: python scripts/deployment/botlogs.sh
  deploy: render deploy