name: Deploy Telegram Mini App

on:
  push:
    branches:
      - main
      - deploy-telegram-mini-app-production
    paths:
      - 'telegram-mini-app/**'
      - '.github/workflows/deploy-mini-app.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'telegram-mini-app/**'
      - '.github/workflows/deploy-mini-app.yml'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        default: 'vercel'
        type: choice
        options:
          - vercel
          - netlify
          - render

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Linting and Type Checking
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: telegram-mini-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: telegram-mini-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint || true
      
      - name: TypeScript type check
        run: npx tsc --noEmit

  # Job 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: telegram-mini-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: telegram-mini-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: |
          if [ -f "vitest.config.ts" ]; then
            npx vitest run --coverage || true
          else
            echo "No test configuration found, skipping tests"
          fi
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: telegram-mini-app/coverage

  # Job 3: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: telegram-mini-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: telegram-mini-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        env:
          VITE_TELEGRAM_BOT_USERNAME: ${{ secrets.TELEGRAM_BOT_USERNAME }}
          VITE_TELEGRAM_WEB_APP_URL: ${{ secrets.TELEGRAM_WEB_APP_URL }}
          VITE_API_URL: ${{ secrets.API_URL }}
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: telegram-mini-app/dist

  # Job 4: Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'vercel')
    defaults:
      run:
        working-directory: telegram-mini-app
    environment:
      name: production-vercel
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: telegram-mini-app/dist
      
      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          url=$(vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN)
          echo "url=$url" >> $GITHUB_OUTPUT
      
      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Telegram Mini App deployed to Vercel: ${{ steps.deploy.outputs.url }}'
            })

  # Job 5: Deploy to Netlify  
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'netlify'
    defaults:
      run:
        working-directory: telegram-mini-app
    environment:
      name: production-netlify
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: telegram-mini-app/dist
      
      - name: Deploy to Netlify
        id: deploy
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        with:
          args: deploy --dir=telegram-mini-app/dist --prod
      
      - name: Get deployment URL
        id: get-url
        run: |
          echo "url=https://${{ secrets.NETLIFY_SITE_NAME }}.netlify.app" >> $GITHUB_OUTPUT

  # Job 6: Deploy to Render (Static Site)
  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'render'
    environment:
      name: production-render
      url: https://${{ secrets.RENDER_SERVICE_NAME }}.onrender.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Trigger Render Deploy
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys

  # Job 7: Performance and Lighthouse Audit
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target == 'vercel')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Wait for deployment to be ready
        run: sleep 30
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ needs.deploy-vercel.outputs.url }}
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Format Lighthouse Score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const results = ${{ steps.lighthouse.outputs.manifest }}
            const score = results[0].summary
            const formatResult = (res) => Math.round(res * 100)
            const comment = `
            ### Lighthouse Report
            | Metric | Score |
            |--------|-------|
            | Performance | ${formatResult(score.performance)} |
            | Accessibility | ${formatResult(score.accessibility)} |
            | Best Practices | ${formatResult(score['best-practices'])} |
            | SEO | ${formatResult(score.seo)} |
            `
            return comment
      
      - name: Comment PR with Lighthouse results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ${{ steps.format_lighthouse_score.outputs.result }}
            })

  # Job 8: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: telegram-mini-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: telegram-mini-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate || true
      
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high