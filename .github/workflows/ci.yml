name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  python:
    name: Python Tests & Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy pytest pytest-cov pytest-asyncio
      
      - name: Run Ruff linter
        run: |
          ruff check src/ tests/ --output-format=github
      
      - name: Check code formatting with Black
        run: |
          black --check src/ tests/
      
      - name: Run type checking with mypy
        run: |
          mypy src/ --ignore-missing-imports --no-strict-optional
      
      - name: Run tests with coverage
        env:
          TELEGRAM_BOT_TOKEN: test_token
          OPENAI_API_KEY: test_key
          SUPABASE_URL: https://test.supabase.co
          SUPABASE_KEY: test_key
          UPSTASH_REDIS_REST_URL: https://test.upstash.io
          UPSTASH_REDIS_REST_TOKEN: test_token
          UPSTASH_VECTOR_REST_URL: https://test.upstash.io
          UPSTASH_VECTOR_REST_TOKEN: test_token
        run: |
          pytest tests/ \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=json \
            --cov-report=html \
            --cov-fail-under=85 \
            -v
      
      - name: Upload Python coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: python-coverage-report
          path: |
            coverage.json
            htmlcov/

  frontend:
    name: Frontend Tests & Checks
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: telegram-mini-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: telegram-mini-app/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run TypeScript compiler
        run: npm run type-check
      
      - name: Run tests with coverage
        run: |
          npm run test:coverage -- --reporter=json --reporter=text
      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(node -e "const cov = require('./coverage/coverage-summary.json'); console.log(cov.total.statements.pct)")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 85" | bc -l) )); then
            echo "Coverage $COVERAGE% is below 85% threshold"
            exit 1
          fi
      
      - name: Upload Frontend coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: |
            telegram-mini-app/coverage/

  sentry-release:
    name: Create Sentry Release
    runs-on: ubuntu-latest
    needs: [python, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Sentry CLI
        run: npm install -g @sentry/cli
      
      - name: Create Sentry release and upload source maps
        if: env.SENTRY_AUTH_TOKEN != ''
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT_FRONTEND: ${{ secrets.SENTRY_PROJECT_FRONTEND }}
          SENTRY_PROJECT_BACKEND: ${{ secrets.SENTRY_PROJECT_BACKEND }}
        run: |
          VERSION="${GITHUB_SHA:0:7}"
          
          # Create release for frontend
          if [ -n "$SENTRY_PROJECT_FRONTEND" ]; then
            sentry-cli releases new "$VERSION" --project "$SENTRY_PROJECT_FRONTEND"
            
            # Build frontend for source maps
            cd telegram-mini-app
            npm ci
            npm run build
            
            # Upload source maps
            sentry-cli releases files "$VERSION" upload-sourcemaps ./dist \
              --project "$SENTRY_PROJECT_FRONTEND" \
              --url-prefix "~/"
            
            # Finalize frontend release
            sentry-cli releases finalize "$VERSION" --project "$SENTRY_PROJECT_FRONTEND"
            cd ..
          fi
          
          # Create release for backend
          if [ -n "$SENTRY_PROJECT_BACKEND" ]; then
            sentry-cli releases new "$VERSION" --project "$SENTRY_PROJECT_BACKEND"
            sentry-cli releases set-commits "$VERSION" --auto --project "$SENTRY_PROJECT_BACKEND"
            sentry-cli releases finalize "$VERSION" --project "$SENTRY_PROJECT_BACKEND"
          fi
          
          echo "Created Sentry release: $VERSION"

  all-checks:
    name: All CI Checks
    runs-on: ubuntu-latest
    needs: [python, frontend]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.python.result }}" == "success" && "${{ needs.frontend.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            echo "Python: ${{ needs.python.result }}"
            echo "Frontend: ${{ needs.frontend.result }}"
            exit 1
          fi