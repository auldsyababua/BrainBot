version: "3.8"

services:
  # Test PostgreSQL database
  test-postgres:
    image: postgres:15
    container_name: flrts-test-db
    environment:
      POSTGRES_DB: flrts_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: testpassword
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432" # Different port to avoid conflicts
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./tests/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d flrts_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase local development stack for testing
  supabase-test:
    image: supabase/postgres:15.1.0.147
    container_name: flrts-supabase-test
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: supabase_admin
      POSTGRES_PASSWORD: supabase_password
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      JWT_SECRET: test-jwt-secret-placeholder-for-development-only
      ANON_KEY: ${TEST_SUPABASE_ANON_KEY:-test-anon-placeholder}
      SERVICE_ROLE_KEY: ${TEST_SUPABASE_SERVICE_KEY:-test-service-placeholder}
    ports:
      - "5434:5432"
    volumes:
      - test_supabase_data:/var/lib/postgresql/data
      - ./tests/sql/supabase_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ./tests/sql/test_data.sql:/docker-entrypoint-initdb.d/02_test_data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supabase_admin -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for testing (if needed for vector store or caching)
  test-redis:
    image: redis:7-alpine
    container_name: flrts-test-redis
    ports:
      - "6380:6379" # Different port to avoid conflicts
    command: redis-server --appendonly yes --requirepass testredispassword
    volumes:
      - test_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Test runner service (optional - for CI/CD)
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: flrts-test-runner
    depends_on:
      test-postgres:
        condition: service_healthy
      supabase-test:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    environment:
      # Test database configuration
      TEST_SUPABASE_URL: http://supabase-test:5432
      TEST_SUPABASE_ANON_KEY: ${TEST_SUPABASE_ANON_KEY:-test-anon-placeholder}
      TEST_SUPABASE_SERVICE_KEY: ${TEST_SUPABASE_SERVICE_KEY:-test-service-placeholder}

      # Fallback to standard postgres for direct connection tests
      TEST_POSTGRES_URL: postgresql://postgres:testpassword@test-postgres:5432/flrts_test
      TEST_REDIS_URL: redis://:testredispassword@test-redis:6379/0

      # Disable production services
      TELEGRAM_BOT_TOKEN: test_token
      OPENAI_API_KEY: test_key
    volumes:
      - .:/app
      - test_results:/app/tests/test_results
    working_dir: /app
    command:
      ["pytest", "--run-integration", "-v", "--tb=short", "--json-report"]

volumes:
  test_postgres_data:
    driver: local
  test_supabase_data:
    driver: local
  test_redis_data:
    driver: local
  test_results:
    driver: local
